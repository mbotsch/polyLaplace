/*=====================================================================================*/
/*! \file		GaussQuadrature.cpp
	\author		peterkau
	\brief		Implementation of class GaussQuadrature
 */
/*=====================================================================================*/

#include "GaussQuadrature.h"
#include <assert.h>
#include <iostream>
#include <fstream>

#define MAX_GAUSS_QUAD_POINTS 10

struct GaussQuadRule
{
	//! For even n: Contains n / 2 positions. For odd n: Contains the value 0, then n / 2 positions
	double m_positions[(MAX_GAUSS_QUAD_POINTS + 1) / 2];

	//! For even n: Contains n / 2 weights. For odd n: Contains the weight for pos 0, then n / 2 weights
	double m_weights[(MAX_GAUSS_QUAD_POINTS + 1) / 2];

	//! Degree of polynomials that are integrated correctly by the method
	int m_degree;
};

// Values from: http://pathfinder.scar.utoronto.ca/~dyer/csca57/book_P/node44.html
static const GaussQuadRule g_rules[MAX_GAUSS_QUAD_POINTS] = {
	{{0.0},												{2.0},						1},							// 1 point
	{{0.577350269},										{1.0},						3},							// 2 points
	{{0.0, 0.77459667},									{0.88888889, 0.55555555},	5},							// 3 points
	{{0.33998104, 0.86113631},							{0.65214515, 0.34785485},	7},							// 4 points
	{{0.0, 0.53846931, 0.90617985},						{0.56888889, 0.47862867, 0.23692689}, 9},				// 5 points
	{{0.23861918, 0.66120939, 0.93246951},				{0.46791393, 0.36076157, 0.17132449}, 11},				// 6 points
	{{0.0, 0.40584515, 0.74153119, 0.94910791},			{0.41795918, 0.38183005, 0.27970539, 0.12948497}, 13},	// 7 points
	{{0.18343464, 0.52553241, 0.79666648, 0.96028986},	{0.36268378, 0.31370665, 0.22238103, 0.10122854}, 15},	// 8 points
	{{0}, {0}, 17},	// 9 points
	{{0.14887434, 0.43339539, 0.67940957, 0.86506337, 0.97390653}, {0.29552422, 0.26926672, 0.21908636, 0.14945135, 0.06667134}, 19}	// 10 points
};


void GaussQuadrature::GetEvalPoint(int totalEvalPoints, int i, double &weight, double &position)
{
	if(totalEvalPoints - 1 >= MAX_GAUSS_QUAD_POINTS)
	{
		weight = 0;
		position = 0;
		return;
	}

	if(i < 0 || i >= totalEvalPoints)
	{
        assert(0);
		weight = 0;
		position = 0;
		return;
	}

	const GaussQuadRule &rule = g_rules[totalEvalPoints - 1];

	if(rule.m_weights[0] <= 0)
	{
        assert(0);	// Rule not defined!
		weight = 0;
		position = 0;
		return;
	}

	if(totalEvalPoints % 2 == 1)
	{
		if(i == 0)
		{
			weight = rule.m_weights[0];
			position = rule.m_positions[0];
		}
		else
		{
			weight = rule.m_weights[(i - 1) / 2 + 1];
			position = rule.m_positions[(i - 1) / 2 + 1];

			if(i % 2 == 0)
				position = -position;
		}
	}
	else
	{
		weight = rule.m_weights[i / 2];
		position = rule.m_positions[i / 2];

		if(i % 2 == 1)
			position = -position;
	}
}

namespace {
#include "GaussRules2d.h"
}



double area(const Eigen::Vector2d& a,
            const Eigen::Vector2d& b,
            const Eigen::Vector2d& c) {
    
    
    return std::abs(0.5 * (-a(1) * b(0) + a(0) * b(1) + a(1) * c(0) - b(1) * c(0) - a(0) * c(1) + b(0) * c(1)));
}

double gaussQuadratureTriangle(const Eigen::Vector2d& p,
                               const Eigen::Vector2d& q,
                               const Eigen::Vector2d& r,
                               const std::function<double(double, double)>& g,  int n) {
    
    if(n >= gaussRules2d.size()) n = (int)gaussRules2d.size() - 1;
    if(n < 1) n = 1;
    
    double val = 0;
    
    for(auto& gr : gaussRules2d[n - 1]) {
        Eigen::Vector2d x = (1. - gr[0] - gr[1]) * p + gr[0] * q + gr[1] * r;
        val += gr[2] * g(x(0), x(1));
    }

    return val * area(p, q, r);
    
}

double gaussQuadratureTriangle(const Eigen::MatrixXd& tri,
                               const std::function<double(double, double)>& g, const int n) {

    return gaussQuadratureTriangle(tri.row(0), tri.row(1), tri.row(2), g, n);
}
 
void PolyhedralQuadrature::add(const Eigen::Vector3d& pi, const double wi) {
    p.push_back(pi);
    w.push_back(wi);
}


double PolyhedralQuadrature::apply(const std::function<double(Eigen::Vector3d)>& fun) {
    double val = .0;
    const int n = (int)p.size();
    
    for(int i = 0; i < n; ++i) {
        val += w[i] * fun(p[i]);
    }
    
    return val;
}

PolyhedralQuadrature::PolyhedralQuadrature(const Eigen::Vector3d& min, const Eigen::Vector3d& max,
                                           std::function<bool(Eigen::Vector3d)> inside,
                                           const int pts, const int ptsg) {
    
    const Eigen::Vector3d step = (max - min) / pts;
    double boxVol = step.prod();
    
    for(int i = 0; i < pts - 1; ++i) {
        for(int j = 0; j < pts - 1; ++j) {
            for(int k = 0; k < pts - 1; ++k) {
                Eigen::Vector3d bmin = min + step.cwiseProduct(Eigen::Vector3d(i, j, k));
                
                for(int ig = 0; ig < ptsg; ++ig) {
                    for(int jg = 0; jg < ptsg; ++jg) {
                        for(int kg = 0; kg < ptsg; ++kg) {
                            Eigen::Vector3d p, w;
                            
                            GaussQuadrature::GetEvalPoint(ptsg, ig, w[0], p[0]);
                            GaussQuadrature::GetEvalPoint(ptsg, jg, w[1], p[1]);
                            GaussQuadrature::GetEvalPoint(ptsg, kg, w[2], p[2]);
                            
                            p = (p + Eigen::Vector3d::Ones()) / 2.;
                            p = p.cwiseProduct(step) + bmin;
                            
                            if(inside(p)) add(p, w.prod() * boxVol / 8.);
                        }
                    }
                }
            }
        }
    }
    
                
    std::cout << "grid quad points " << p.size() << std::endl;
}


double gridQuadrature(const Eigen::Vector3d& min, const Eigen::Vector3d& max,
                   //   std::function<bool(Eigen::Vector3d)> inside,
                      std::function<double(Eigen::Vector3d)> fun, const int pts) {
    
    const Eigen::Vector3d step = (max - min) / pts;
    double boxVol = step.prod();
    double sum = .0;
    int ptsg = 10;
    
    for(int i = 0; i < pts - 1; ++i) {
        for(int j = 0; j < pts - 1; ++j) {
            for(int k = 0; k < pts - 1; ++k) {
                Eigen::Vector3d bmin = min + step.cwiseProduct(Eigen::Vector3d(i, j, k));
                
                for(int ig = 0; ig < ptsg; ++ig) {
                    for(int jg = 0; jg < ptsg; ++jg) {
                        for(int kg = 0; kg < ptsg; ++kg) {
                            Eigen::Vector3d p, w;
                            
                            GaussQuadrature::GetEvalPoint(ptsg, ig, w[0], p[0]);
                            GaussQuadrature::GetEvalPoint(ptsg, jg, w[1], p[1]);
                            GaussQuadrature::GetEvalPoint(ptsg, kg, w[2], p[2]);
                            
                            p = (p + Eigen::Vector3d::Ones()) / 2.;
                            p = p.cwiseProduct(step) + bmin;
                            
                            //if(inside(p)) 
                            sum += fun(p) * w.prod() * boxVol / 8.;
                        }
                    }
                }
            }
        }
    }
    
    return sum;
}


TetrahedralQuadrature::TetrahedralQuadrature(const std::vector<Eigen::MatrixXd>& tets_, int order)
: tets(tets_) {
    
    for(int i = 0; i < tets.size(); ++i) {
        volumes.push_back(std::abs((tets[i].topRows(3).rowwise() - tets[i].row(3)).determinant() / 6.));
    }
}

double TetrahedralQuadrature::apply(const std::function<double (Eigen::Vector3d)> &fun) {
    
    double ret = 0.;
    
    for(int i = 0; i < tets.size(); ++i) {
        double val = .0;
        
        for(int j = 0; j < N; ++j) {
            Eigen::Vector3d p = tets[i].transpose() * Eigen::Map<Eigen::Vector4d>(&quadPoints[j][0], 4);
            val += quadPoints[j][4] * fun(p);
        }
        
        ret += val * volumes[i];
    }
    
    return ret;
}


TetrahedralQuadrature::TetrahedralQuadrature() {}

int TetrahedralQuadrature::N = 8;
double TetrahedralQuadrature::quadPoints[8][5]{{0.3281633025163816867896358645815337845,0.3281633025163816867896358645815337845,0.3281633025163816867896358645815337845,0.01551009245085493963109240625539864640,0.13621784253708735706757154019171552070},{0.3281633025163816867896358645815337845,0.3281633025163816867896358645815337845,0.01551009245085493963109240625539864640,0.3281633025163816867896358645815337845,0.13621784253708735706757154019171552070},{0.3281633025163816867896358645815337845,0.01551009245085493963109240625539864640,0.3281633025163816867896358645815337845,0.3281633025163816867896358645815337845,0.13621784253708735706757154019171552070},{0.015510092450854939631092406255398646395,0.32816330251638168678963586458153378454,0.32816330251638168678963586458153378454,0.32816330251638168678963586458153378454,0.13621784253708735706757154019171552070},{0.10804724989842860411756338920581330828,0.10804724989842860411756338920581330828,0.10804724989842860411756338920581330828,0.6758582503047141876473098323825600752,0.11378215746291264293242845980828447930},{0.10804724989842860411756338920581330827,0.10804724989842860411756338920581330828,0.6758582503047141876473098323825600752,0.10804724989842860411756338920581330828,0.11378215746291264293242845980828447930},{0.10804724989842860411756338920581330828,0.6758582503047141876473098323825600752,0.10804724989842860411756338920581330828,0.10804724989842860411756338920581330828,0.11378215746291264293242845980828447930},{0.67585825030471418764730983238256007516,0.10804724989842860411756338920581330828,0.10804724989842860411756338920581330828,0.10804724989842860411756338920581330828,0.11378215746291264293242845980828447930}};

#if 0
int TetrahedralQuadrature::N = 81;

double TetrahedralQuadrature::quadPoints[81][5]{{0.25,0.25,0.25,0.25,0.047399773556020738384738821178051099601},{0.3122500686951886477298083186868274552,0.3122500686951886477298083186868274552,0.3122500686951886477298083186868274552,0.0632497939144340568105750439395176344,0.026937059992268699802764161004882083961},{0.3122500686951886477298083186868274552,0.3122500686951886477298083186868274552,0.0632497939144340568105750439395176344,0.3122500686951886477298083186868274552,0.026937059992268699802764161004882083961},{0.3122500686951886477298083186868274552,0.0632497939144340568105750439395176344,0.3122500686951886477298083186868274552,0.3122500686951886477298083186868274552,0.026937059992268699802764161004882083961},{0.0632497939144340568105750439395176344,0.3122500686951886477298083186868274552,0.3122500686951886477298083186868274552,0.3122500686951886477298083186868274552,0.026937059992268699802764161004882083961},{0.11430965385734615058737119765365044529,0.11430965385734615058737119765365044529,0.11430965385734615058737119765365044529,0.6570710384279615482378864070390486641,0.009869159716793383234557735430173076270},{0.11430965385734615058737119765365044529,0.11430965385734615058737119765365044529,0.6570710384279615482378864070390486641,0.11430965385734615058737119765365044529,0.009869159716793383234557735430173076270},{0.11430965385734615058737119765365044529,0.6570710384279615482378864070390486641,0.11430965385734615058737119765365044529,0.11430965385734615058737119765365044529,0.009869159716793383234557735430173076270},{0.65707103842796154823788640703904866413,0.11430965385734615058737119765365044529,0.11430965385734615058737119765365044529,0.11430965385734615058737119765365044529,0.009869159716793383234557735430173076270},{0.4104307392189654942878978442515116875,0.16548602561961105160449012444452641453,0.4104307392189654942878978442515116875,0.013652495942457959819714187052450210495,0.011393881220195231623620934880714335646},{0.013652495942457959819714187052450210495,0.16548602561961105160449012444452641452,0.4104307392189654942878978442515116875,0.4104307392189654942878978442515116875,0.011393881220195231623620934880714335646},{0.013652495942457959819714187052450210495,0.4104307392189654942878978442515116875,0.4104307392189654942878978442515116875,0.16548602561961105160449012444452641453,0.011393881220195231623620934880714335646},{0.4104307392189654942878978442515116875,0.013652495942457959819714187052450210495,0.16548602561961105160449012444452641452,0.4104307392189654942878978442515116875,0.011393881220195231623620934880714335646},{0.4104307392189654942878978442515116875,0.4104307392189654942878978442515116875,0.013652495942457959819714187052450210495,0.16548602561961105160449012444452641453,0.011393881220195231623620934880714335646},{0.013652495942457959819714187052450210495,0.4104307392189654942878978442515116875,0.16548602561961105160449012444452641452,0.4104307392189654942878978442515116875,0.011393881220195231623620934880714335646},{0.4104307392189654942878978442515116875,0.013652495942457959819714187052450210495,0.4104307392189654942878978442515116875,0.16548602561961105160449012444452641453,0.011393881220195231623620934880714335646},{0.16548602561961105160449012444452641453,0.4104307392189654942878978442515116875,0.013652495942457959819714187052450210495,0.4104307392189654942878978442515116875,0.011393881220195231623620934880714335646},{0.16548602561961105160449012444452641452,0.4104307392189654942878978442515116875,0.4104307392189654942878978442515116875,0.013652495942457959819714187052450210495,0.011393881220195231623620934880714335646},{0.4104307392189654942878978442515116875,0.4104307392189654942878978442515116875,0.16548602561961105160449012444452641453,0.013652495942457959819714187052450210495,0.011393881220195231623620934880714335646},{0.16548602561961105160449012444452641453,0.013652495942457959819714187052450210495,0.4104307392189654942878978442515116875,0.4104307392189654942878978442515116875,0.011393881220195231623620934880714335646},{0.4104307392189654942878978442515116875,0.16548602561961105160449012444452641452,0.013652495942457959819714187052450210495,0.4104307392189654942878978442515116875,0.011393881220195231623620934880714335646},{0.006138008824790747847593713248415351075,0.942988767345204866197630586918250763,0.006138008824790747847593713248415351075,0.04473521500521363810718198658491853490,0.00036194434433925362423987838480851181462},{0.04473521500521363810718198658491853490,0.942988767345204866197630586918250763,0.006138008824790747847593713248415351075,0.006138008824790747847593713248415351075,0.00036194434433925362423987838480851181462},{0.04473521500521363810718198658491853490,0.006138008824790747847593713248415351075,0.006138008824790747847593713248415351075,0.942988767345204866197630586918250763,0.00036194434433925362423987838480851181462},{0.006138008824790747847593713248415351075,0.04473521500521363810718198658491853490,0.942988767345204866197630586918250763,0.006138008824790747847593713248415351075,0.00036194434433925362423987838480851181462},{0.006138008824790747847593713248415351075,0.006138008824790747847593713248415351075,0.04473521500521363810718198658491853490,0.942988767345204866197630586918250763,0.00036194434433925362423987838480851181462},{0.04473521500521363810718198658491853490,0.006138008824790747847593713248415351075,0.942988767345204866197630586918250763,0.006138008824790747847593713248415351075,0.00036194434433925362423987838480851181462},{0.006138008824790747847593713248415351075,0.04473521500521363810718198658491853490,0.006138008824790747847593713248415351075,0.942988767345204866197630586918250763,0.00036194434433925362423987838480851181462},{0.942988767345204866197630586918250763,0.006138008824790747847593713248415351075,0.04473521500521363810718198658491853490,0.006138008824790747847593713248415351075,0.00036194434433925362423987838480851181462},{0.942988767345204866197630586918250763,0.006138008824790747847593713248415351075,0.006138008824790747847593713248415351075,0.04473521500521363810718198658491853490,0.00036194434433925362423987838480851181462},{0.006138008824790747847593713248415351075,0.006138008824790747847593713248415351075,0.942988767345204866197630586918250763,0.04473521500521363810718198658491853490,0.00036194434433925362423987838480851181462},{0.942988767345204866197630586918250763,0.04473521500521363810718198658491853490,0.006138008824790747847593713248415351075,0.006138008824790747847593713248415351075,0.00036194434433925362423987838480851181462},{0.006138008824790747847593713248415351075,0.942988767345204866197630586918250763,0.04473521500521363810718198658491853490,0.006138008824790747847593713248415351075,0.00036194434433925362423987838480851181462},{0.12105018114558942599389500159505052763,0.4771903799042803505441064082969072206,0.12105018114558942599389500159505052763,0.28070925780454079746810358851299172412,0.025739731980456071279036012259654705161},{0.28070925780454079746810358851299172412,0.4771903799042803505441064082969072206,0.12105018114558942599389500159505052763,0.12105018114558942599389500159505052763,0.025739731980456071279036012259654705161},{0.28070925780454079746810358851299172412,0.12105018114558942599389500159505052763,0.12105018114558942599389500159505052763,0.4771903799042803505441064082969072206,0.025739731980456071279036012259654705161},{0.12105018114558942599389500159505052763,0.28070925780454079746810358851299172412,0.4771903799042803505441064082969072206,0.12105018114558942599389500159505052763,0.025739731980456071279036012259654705161},{0.12105018114558942599389500159505052763,0.12105018114558942599389500159505052763,0.28070925780454079746810358851299172412,0.4771903799042803505441064082969072206,0.025739731980456071279036012259654705161},{0.28070925780454079746810358851299172412,0.12105018114558942599389500159505052763,0.4771903799042803505441064082969072206,0.12105018114558942599389500159505052763,0.025739731980456071279036012259654705161},{0.12105018114558942599389500159505052763,0.28070925780454079746810358851299172412,0.12105018114558942599389500159505052763,0.4771903799042803505441064082969072206,0.025739731980456071279036012259654705161},{0.4771903799042803505441064082969072206,0.12105018114558942599389500159505052763,0.28070925780454079746810358851299172412,0.12105018114558942599389500159505052763,0.025739731980456071279036012259654705161},{0.4771903799042803505441064082969072206,0.12105018114558942599389500159505052763,0.12105018114558942599389500159505052763,0.28070925780454079746810358851299172412,0.025739731980456071279036012259654705161},{0.12105018114558942599389500159505052763,0.12105018114558942599389500159505052763,0.4771903799042803505441064082969072206,0.28070925780454079746810358851299172412,0.025739731980456071279036012259654705161},{0.4771903799042803505441064082969072206,0.28070925780454079746810358851299172412,0.12105018114558942599389500159505052763,0.12105018114558942599389500159505052763,0.025739731980456071279036012259654705161},{0.12105018114558942599389500159505052763,0.4771903799042803505441064082969072206,0.28070925780454079746810358851299172412,0.12105018114558942599389500159505052763,0.025739731980456071279036012259654705161},{0.03277946821644267077472102033232419041,0.5942562694800070256615700343856802983,0.03277946821644267077472102033232419041,0.3401847940871076327889879249496713209,0.010135871679755792788516470115016777196},{0.3401847940871076327889879249496713209,0.5942562694800070256615700343856802983,0.03277946821644267077472102033232419041,0.03277946821644267077472102033232419041,0.010135871679755792788516470115016777196},{0.3401847940871076327889879249496713209,0.03277946821644267077472102033232419041,0.03277946821644267077472102033232419041,0.5942562694800070256615700343856802983,0.010135871679755792788516470115016777196},{0.03277946821644267077472102033232419041,0.3401847940871076327889879249496713209,0.5942562694800070256615700343856802983,0.03277946821644267077472102033232419041,0.010135871679755792788516470115016777196},{0.03277946821644267077472102033232419041,0.03277946821644267077472102033232419041,0.3401847940871076327889879249496713209,0.5942562694800070256615700343856802983,0.010135871679755792788516470115016777196},{0.3401847940871076327889879249496713209,0.03277946821644267077472102033232419041,0.5942562694800070256615700343856802983,0.03277946821644267077472102033232419041,0.010135871679755792788516470115016777196},{0.03277946821644267077472102033232419041,0.3401847940871076327889879249496713209,0.03277946821644267077472102033232419041,0.5942562694800070256615700343856802983,0.010135871679755792788516470115016777196},{0.5942562694800070256615700343856802983,0.03277946821644267077472102033232419041,0.3401847940871076327889879249496713209,0.03277946821644267077472102033232419041,0.010135871679755792788516470115016777196},{0.5942562694800070256615700343856802983,0.03277946821644267077472102033232419041,0.03277946821644267077472102033232419041,0.3401847940871076327889879249496713209,0.010135871679755792788516470115016777196},{0.03277946821644267077472102033232419041,0.03277946821644267077472102033232419041,0.5942562694800070256615700343856802983,0.3401847940871076327889879249496713209,0.010135871679755792788516470115016777196},{0.5942562694800070256615700343856802983,0.3401847940871076327889879249496713209,0.03277946821644267077472102033232419041,0.03277946821644267077472102033232419041,0.010135871679755792788516470115016777196},{0.03277946821644267077472102033232419041,0.5942562694800070256615700343856802983,0.3401847940871076327889879249496713209,0.03277946821644267077472102033232419041,0.010135871679755792788516470115016777196},{0.032485281564823047835514939978426196705,0.8011772846583443912311416840785809818,0.032485281564823047835514939978426196705,0.13385215221200951309782843596456662480,0.0065761472770359041674557402004507010966},{0.13385215221200951309782843596456662480,0.8011772846583443912311416840785809818,0.032485281564823047835514939978426196705,0.032485281564823047835514939978426196705,0.0065761472770359041674557402004507010966},{0.13385215221200951309782843596456662480,0.032485281564823047835514939978426196705,0.032485281564823047835514939978426196705,0.8011772846583443912311416840785809818,0.0065761472770359041674557402004507010966},{0.032485281564823047835514939978426196705,0.13385215221200951309782843596456662480,0.8011772846583443912311416840785809818,0.032485281564823047835514939978426196705,0.0065761472770359041674557402004507010966},{0.032485281564823047835514939978426196705,0.032485281564823047835514939978426196705,0.13385215221200951309782843596456662480,0.8011772846583443912311416840785809818,0.0065761472770359041674557402004507010966},{0.13385215221200951309782843596456662480,0.032485281564823047835514939978426196705,0.8011772846583443912311416840785809818,0.032485281564823047835514939978426196705,0.0065761472770359041674557402004507010966},{0.032485281564823047835514939978426196705,0.13385215221200951309782843596456662480,0.032485281564823047835514939978426196705,0.8011772846583443912311416840785809818,0.0065761472770359041674557402004507010966},{0.8011772846583443912311416840785809818,0.032485281564823047835514939978426196705,0.13385215221200951309782843596456662480,0.032485281564823047835514939978426196705,0.0065761472770359041674557402004507010966},{0.8011772846583443912311416840785809818,0.032485281564823047835514939978426196705,0.032485281564823047835514939978426196705,0.13385215221200951309782843596456662480,0.0065761472770359041674557402004507010966},{0.032485281564823047835514939978426196705,0.032485281564823047835514939978426196705,0.8011772846583443912311416840785809818,0.13385215221200951309782843596456662480,0.0065761472770359041674557402004507010966},{0.8011772846583443912311416840785809818,0.13385215221200951309782843596456662480,0.032485281564823047835514939978426196705,0.032485281564823047835514939978426196705,0.0065761472770359041674557402004507010966},{0.032485281564823047835514939978426196705,0.8011772846583443912311416840785809818,0.13385215221200951309782843596456662480,0.032485281564823047835514939978426196705,0.0065761472770359041674557402004507010966},{0.1749793421839390242849492265283103972,0.628071845475366010693276072217909666,0.1749793421839390242849492265283103972,0.02196947015675594073682547472546953991,0.012907035798861990639295430249498990709},{0.02196947015675594073682547472546953991,0.628071845475366010693276072217909666,0.1749793421839390242849492265283103972,0.1749793421839390242849492265283103972,0.012907035798861990639295430249498990709},{0.02196947015675594073682547472546953991,0.1749793421839390242849492265283103972,0.1749793421839390242849492265283103972,0.628071845475366010693276072217909666,0.012907035798861990639295430249498990709},{0.1749793421839390242849492265283103972,0.02196947015675594073682547472546953991,0.628071845475366010693276072217909666,0.1749793421839390242849492265283103972,0.012907035798861990639295430249498990709},{0.1749793421839390242849492265283103972,0.1749793421839390242849492265283103972,0.02196947015675594073682547472546953991,0.628071845475366010693276072217909666,0.012907035798861990639295430249498990709},{0.02196947015675594073682547472546953991,0.1749793421839390242849492265283103972,0.628071845475366010693276072217909666,0.1749793421839390242849492265283103972,0.012907035798861990639295430249498990709},{0.1749793421839390242849492265283103972,0.02196947015675594073682547472546953991,0.1749793421839390242849492265283103972,0.628071845475366010693276072217909666,0.012907035798861990639295430249498990709},{0.62807184547536601069327607221790966565,0.17497934218393902428494922652831039722,0.021969470156755940736825474725469539910,0.17497934218393902428494922652831039722,0.012907035798861990639295430249498990709},{0.62807184547536601069327607221790966565,0.17497934218393902428494922652831039722,0.17497934218393902428494922652831039722,0.021969470156755940736825474725469539910,0.012907035798861990639295430249498990709},{0.1749793421839390242849492265283103972,0.1749793421839390242849492265283103972,0.628071845475366010693276072217909666,0.02196947015675594073682547472546953991,0.012907035798861990639295430249498990709},{0.62807184547536601069327607221790966565,0.021969470156755940736825474725469539910,0.17497934218393902428494922652831039722,0.17497934218393902428494922652831039722,0.012907035798861990639295430249498990709},{0.1749793421839390242849492265283103972,0.628071845475366010693276072217909666,0.02196947015675594073682547472546953991,0.1749793421839390242849492265283103972,0.012907035798861990639295430249498990709}};
#endif
